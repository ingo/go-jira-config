endpoint: https://jira.axway.com/
custom-commands:
  - name: print-project
    help: print the name of the configured project
    script: |-
        echo $JIRA_PROJECT

  - name: mine
    help: display issues assigned to me
    script: |-
      if [ -n "$JIRA_PROJECT" ]; then
          # if `project: ...` configured just list the issues for current project
          {{jira}} list --template table --query "resolution = unresolved and assignee=currentuser() and project = $JIRA_PROJECT ORDER BY priority asc, created"
      else
          # otherwise list issues for all project
          {{jira}} list --template table --query "resolution = unresolved and assignee=currentuser() ORDER BY priority asc, created"
      fi

  - name: projects
    help: list all projects
    script: |
      {{jira}} req "rest/api/2/project"

  - name: committers
    help: list a project
    script: |
      names=$({{jira}} list --template json --query "project = $JIRA_PROJECT ORDER BY resolutiondate DESC" | jq '.issues[].fields.assignee.name')
      echo $names | tr '[:punct:]' ' ' | tr 'A-Z' 'a-z' | tr -s ' ' | tr ' ' '\n' | sort | uniq -c | sort -rn

  - name: project
    help: list a project
    script: |
      {{jira}} req "rest/api/2/project/$JIRA_PROJECT"

  - name: members
    help: members of a particular role on a project
    args:
      - name: ROLE
        type: enum
        required: true
        enum: [admin, dev, spoc, users]
        # "Administrators": "10002",
        # "Developers": "10001",
        # "ECD L1 Support": "10091",
        # "ECD L2 Support": "10092",
        # "ECD L3 Support": "10093",
        # "Manager": "10290",
        # "PM": "10291",
        # "Project watcher": "10070",
        # "QA": "10292",
        # "SPOC": "10490",
        # "Sprint Managers": "10190",
        # "Users": "10000",
        # "Viewer": "10030",
        # "Zephyr QA": "10293"
    script: |
      ROLEID=""
      case "{{args.ROLE}}" in
      "admin")  ROLEID=10002
          ;;
      "dev")  ROLEID=10001
          ;;
      "spoc")  ROLEID=10490
          ;;
      "users")  ROLEID=10000
          ;;
      *) ROLEID=""
         ;;
      esac

      # Loop through all projects
      PROJECTS=$({{jira}} req "rest/api/2/project?expand=lead" | jq -r '[.[] | {name: .name, key: .key, id: .id, lead: .lead.displayName, category: .projectCategory.name}]')
      echo $PROJECTS | jq -c '.[]' | while read i; do
        name=$(echo $i | jq -c -r '.name')
        category=$(echo $i | jq -c -r '.category')
        if [ "$category" = "AMPLIFY" ]
        then
          id=$(echo $i | jq -c -r '.id')
          # Find the people attached to the specific role
          names=$({{jira}} req "rest/api/2/project/$id/role/$ROLEID" | jq -c -r '.actors[].displayName')
          echo "$name\n======================"
          echo "$names\n"
        fi
      done

  - name: gantt
    help: create a gantt chart based on a list of issues
    args:
      - name: ISSUE
        required: true
    script: |

      # Get the list of all issues attached to the initial issue. TBD to allow an array of top-level issues
      ISSUES=$({{jira}} list --template json --query "issue = {{args.ISSUE}} or issue in linkedAllIssues("{{args.ISSUE}}")")
      ISSUE_LIST=$(echo $ISSUES | jq -r -c '.issues[].key')
      LIST=""

      # Due to newlines in the JSON output, jq fails to parse it correctly, so we have to do separate queries for each item
      for key in $ISSUE_LIST; do
        echo "Processing $key"
        summary=$({{jira}} view "$key" --template json --gjq "fields.summary")

        # if no links, write out null
        links=$({{jira}} view "$key" --template json --gjq "fields.issuelinks.#.inwardIssue.key")
        if [ $links = "[]" ]; then
          links="null";
        else
          links="'${links//[\[|\]|\"]/}'"
        fi

        # JIRA reports data in seconds, but Gantt macro requires milliseconds
        total=$({{jira}} view "$key" --template json --gjq "fields.aggregateprogress.total")
        total="$total""000"
        progress=$({{jira}} view "$key" --template json --gjq "fields.aggregateprogress.percent")
        item="['$key', '$summary', null, null, $total, $progress, $links],\n"
        LIST+="$item"
      done

      echo "["
      # Strip last , from array (plus \n)
      echo "${LIST%,*}"
      echo "]"

  - name: epics
    help: list epics
    args:
      - name: filter
    options:
      - name: project
        short: p
        required: true
        help: The project in which to search
    script: |-
      filter=""
      {{if args.filter}}
        filter="{{args.filter}}"
      {{end}}
      {{jira}} list --template table --query "resolution = unresolved AND issuetype = Epic AND project = {{options.project}} $filter ORDER BY Rank Desc" --queryfields=customfield_12551,issuetype,priority,assignee,status,created,reporter

  - name: premature
    help: display issues started before the Epic is ready
    options:
      - name: project
        short: p
        help: The project in which to search
        default: ""
      - name: category
        short: c
        help: The category of project(s) in which to search
        default: ""
    script: |-
      QUERY="(status not in (Open, New, Preparing) OR Sprint is not EMPTY OR fixVersion is not EMPTY) AND issue in issuesWhereEpicIn('status in (Draft, Candidate)')"
      {{if options.project}}
          # if `project: ...` configured just list the issues for current project
          {{jira}} list --template table --query "project = {{options.project}} AND $QUERY"
      {{else if options.category}}
          # otherwise list issues for all projects in a category
          {{jira}} list --template table --query "category = {{options.category}} AND project != DEVOPS AND $QUERY"
      {{else}}
          # otherwise list issues for all projects
          {{jira}} list --template table --query "$QUERY"
      {{end}}

  - name: neglected
    help: display issues in progress but no longer being worked on
    options:
      - name: project
        short: p
        help: The project in which to search
        default: ""
      - name: category
        short: c
        help: The category of project(s) in which to search
        default: ""
    script: |-
      QUERY="sprint not in openSprints() AND sprint not in futureSprints() AND resolution = unresolved AND status not in (Open, Reopened, New, Draft, Preparing, 'Ready for production') ORDER BY status ASC, key ASC, created DESC"
      {{if options.project}}
          # if `project: ...` configured just list the issues for current project
          {{jira}} list --template table --query "project = {{options.project}} AND $QUERY"
      {{else if options.category}}
          # otherwise list issues for all projects in a category
          {{jira}} list --template table --query "category = {{options.category}} AND $QUERY"
      {{else}}
          # otherwise list issues for all projects
          {{jira}} list --template table --query "$QUERY"
      {{end}}

  - name: ruhroh
    help: display issues in progress but somehow marked as included in a release
    options:
      - name: project
        short: p
        help: The project in which to search
        default: ""
      - name: category
        short: c
        help: The category of project(s) in which to search
        default: ""
    script: |-
      QUERY="category = AMPLIFY AND resolution = unresolved AND fixVersion in releasedVersions()"
      {{if options.project}}
          # if `project: ...` configured just list the issues for current project
          {{jira}} list --template table --query "project = {{options.project}} AND $QUERY"
      {{else if options.category}}
          # otherwise list issues for all projects in a category
          {{jira}} list --template table --query "category = {{options.category}} AND $QUERY"
      {{else}}
          # otherwise list issues for all projects
          {{jira}} list --template table --query "$QUERY"
      {{end}}

  - name: sprint
    help: display issues for active sprint
    script: |-
      if [ -n "$JIRA_PROJECT" ]; then
          # if `project: ...` configured just list the issues for current project
          {{jira}} list --template table --query "sprint in openSprints() and type != epic and resolution = unresolved and project=$JIRA_PROJECT ORDER BY rank asc, created"
      else
          # otherwise list issues for all project
          {{jira}} list --template table --query "sprint in openSprints() and type != epic and resolution = unresolved ORDER BY rank asc, created"
      fi

  - name: goals
    help: display the goal for sprints on a board
    options:
      - name: boardName
        short: b
        help: The board name to search
        default: "APIC-Beano"
      - name: boardId
        short: i
        help: The board id to use. Superceeds the boardName if both are defined
        default: ""
      - name: startAt
        short: s
        help: The sprint at which to start the list
        default: ""
      - name: filter
        short: f
        help: The search filter to apply for the sprint name or description. Like "(active)"
        default: ""
      - name: context
        short: c
        help: The number of sprints to display before or after those found by the "filter"
    script: |-
      {{if options.boardId}}
        board_id="{{options.boardId}}"
      {{else}}
        board_id=$( {{jira}} req -M GET "rest/agile/1.0/board?name={{options.boardName}}" | jq '.values[0].id' )
        echo board id is: ${board_id}
      {{end}}
      STATE=""
      START_AT=""
      {{if options.startAt}}
        START_AT="startAt={{options.startAt}}"
      {{end}}
      SPRINTS=$({{jira}} req "rest/agile/1.0/board/${board_id}/sprint?$START_AT"  | jq '.values')
      OUTPUT=""

      # Split the list to figure out the total number of elements
      SPRINTS_LIST=( $(echo $SPRINTS | jq -r -c '.[].id') )

      echo $SPRINTS | jq -c '.[]' | while read i; do
        # there is an issue here if the sprint goals or name include double quotes
        id=$(echo $i | jq -c -r '.id')
        name=$(echo $i | jq -c -r '.name')
        goal=$(echo $i | jq -c -r '.goal')
        state=$(echo $i | jq -c -r '.state')
        if [[ $goal = null ]]; then goal=''; fi
        OUTPUT+="\n$name:\t\t$goal ($state)"

        # Write out if we are at the last element in the list
        # We can't do this outside the loop, as the way this loop is constructed,
        # OUTPUT is in a different context now
        if [ $id = ${SPRINTS_LIST[${#SPRINTS_LIST[@]} - 1]} ]; then
          {{if (and (options.context) (options.filter))}}
            echo $OUTPUT | grep -C{{options.context}} "{{options.filter}}"
          {{else}}
            echo $OUTPUT
          {{end}}
        fi
      done

  - name: remote-links list
    help: list remote links on an issue
    args:
      - name: ISSUE
        help: Issue id to lookup
        required: true
    script: |
      {{jira}} req "rest/api/2/issue/{{args.ISSUE}}/remotelink"

  - name: remote-links filtered
    help: display all epics and their attached remote links
    options:
      - name: filter
        short: f
        help: The Jira filter/JQL to search for. Use quotes around phrases
        default: "Amplify Unresolved Epics"
    script: |-
      # Get the list of all issues attached to the initial issue. TBD to allow an array of top-level issues
      ISSUES=$({{jira}} list --template json --query "filter = '{{options.filter}}' and issue in hasRemoteLinks()")
      ISSUE_LIST=$(echo $ISSUES | jq -r -c '.issues[].key')
      LIST=""

      # Due to newlines in the JSON output, jq fails to parse it correctly, so we have to do separate queries for each item
      for key in $ISSUE_LIST; do
        # echo "Processing $key"
        summary=$({{jira}} remote-links list "$key" | jq -r '.[] | ["$key", .object.title, .object.url] | join("\t")')
        # unclear why the parameter subsitution doesn't work in the jq command above
        echo "${summary//\$key/$key}"
      done
  - name: boards list
    help: list all Agile boards (that you can see)
    options:
      - name: project
        short: p
        help: The project in which to search
        default: ""
    script: |
      BOARDS=""
      {{if options.project}}
        BOARDS=$({{jira}} req "rest/agile/1.0/board?projectKeyOrId={{options.project}}")
      {{else}}
        BOARDS=$({{jira}} req "rest/agile/1.0/board")
      {{end}}
      BOARDS_LIST=( $(echo $BOARDS | jq -r -c '.values[].id') )
      # echo ${#BOARDS_LIST[@]}
      for key in "${BOARDS_LIST[@]}"; do
        properties=$({{jira}} req "rest/agile/1.0/board/${key}/configuration")
        id=$( echo $properties | jq -r -c '.filter.id' )
        config=$({{jira}} filter $id)
        result=$( echo $properties | jq -r -c '["{{options.project}}", (.id|tostring), .name, .self, .type, .filter.id, .estimation.field.displayName] | join("\t")')
        echo "$result\t$config"
      done

      # echo $BOARDS | jq -r -c '.values[] | ["{{options.project}}", (.id|tostring), .name, .self, .type] | join("\t")'
  - name: filter
    help: write out the configuration information for a filter
    args:
      - name: id
        required: true
    script: |
      filter=$({{jira}} req "rest/api/2/filter/{{args.id}}")
      echo $filter | jq -r -c '[.id, .jql, .owner.name] | join("\t")'
